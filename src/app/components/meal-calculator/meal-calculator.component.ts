import { Component, OnInit, Input, OnChanges, SimpleChanges } from '@angular/core';
import { FoodCalculatorService } from '../../services/food-calculator.service';
import { ProfileConfigService } from '../../services/profile-config.service';
import { FoodItem } from '../../models/food.model';

@Component({
  selector: 'app-meal-calculator',
  templateUrl: './meal-calculator.component.html',
  styleUrls: ['./meal-calculator.component.css']
})
export class MealCalculatorComponent implements OnInit, OnChanges {
  @Input() currentProfile: string = 'Angel';
  
  mealPlan: { [category: string]: { food: FoodItem, portions: number, totalAmount: string }[] } = {};
  showAlternatives: string | null = null;
  showAddFood: string | null = null;
  selectedMealType: string = 'DESAYUNO';
  cookedItems: Set<string> = new Set(); // Rastrear qu√© items est√°n en modo cocinado
  isLoading: boolean = false;
  
  mealTypes = [
    { key: 'DESAYUNO', label: 'Desayuno', icon: 'üåÖ' },
    { key: 'COMIDA', label: 'Comida', icon: 'üçΩÔ∏è' },
    { key: 'MERIENDA', label: 'Merienda', icon: '‚òï' },
    { key: 'CENA', label: 'Cena', icon: 'üåô' }
  ];

  macroCategories = [
    { key: 'Proteina Semi-Magra', label: 'Prote√≠na SM', icon: 'üêü', color: '#2ECC71' },
    { key: 'Proteina Magra', label: 'Prote√≠na Magra', icon: 'ü•©', color: '#4ECDC4' },
    { key: 'Carbohidratos', label: 'Carbohidratos', icon: 'üçû', color: '#FF6B6B' },
    { key: 'L√°cteos', label: 'L√°cteos', icon: 'ü•õ', color: '#3498DB' },
    { key: 'Grasas', label: 'Grasas', icon: 'ü•ë', color: '#45B7D1' },
    { key: 'Frutas', label: 'Frutas', icon: 'üçì', color: '#FECA57' },
    { key: 'Vegetales', label: 'Vegetales', icon: 'ü•¨', color: '#2ECC71' }
    // { key: 'Legumbres', label: 'Legumbres', icon: 'ü´ò', color: '#8B4513' },
  ];

  constructor(
    private foodCalculatorService: FoodCalculatorService,
    private profileConfigService: ProfileConfigService
  ) {}

  ngOnInit(): void {
    this.loadProfileDailyTarget();
    
    // Suscribirse a cambios en el perfil
    this.profileConfigService.dailyTarget$.subscribe(() => {
      this.loadProfileDailyTarget();
    });
  }

  ngOnChanges(changes: SimpleChanges): void {
    if (changes['currentProfile'] && !changes['currentProfile'].firstChange) {
      // Activar skeleton cuando cambia el perfil
      this.isLoading = true;
      
      // Simular un peque√±o delay para mostrar el skeleton
      setTimeout(() => {
        this.loadProfileDailyTarget();
        this.isLoading = false;
      }, 500);
    }
  }

  private loadProfileDailyTarget(): void {
    // Cargar objetivos de la comida seleccionada
    this.generateMealPlanForMeal();
  }

  generateMealPlan(): void {
    this.mealPlan = this.foodCalculatorService.generateMealPlan(this.selectedMealType);
  }

  getFoodsByCategory(category: string): FoodItem[] {
    return this.foodCalculatorService.getFoodsByCategory(category);
  }

  getTargetValue(category: string): number {
    const mealObjectives = this.getMealObjectives();
    return mealObjectives[category] || 0;
  }

  // Obtener el valor objetivo original (sin ajustes especiales)
  getOriginalTargetValue(category: string): number {
    const profileMealObjectives = this.profileConfigService.getMealObjectives(this.currentProfile);
    const mealObjectives = profileMealObjectives[this.selectedMealType];
    
    if (!mealObjectives) {
      return 0;
    }

    // Mapear objetivos originales sin ajustes
    const originalObjectives = {
      'Proteina Semi-Magra': mealObjectives['prote√≠na SM'] || 0,
      'Proteina Magra': mealObjectives['prote√≠na M'] || 0,
      'Carbohidratos': mealObjectives['carbohidratos'] || 0,
      'L√°cteos': mealObjectives['leche/yogurt'] || 0,
      'Grasas': mealObjectives['grasas'] || 0,
      'Frutas': mealObjectives['fruta'] || 0,
      'Vegetales': mealObjectives['vegetales'] || 0
    };

    return originalObjectives[category as keyof typeof originalObjectives] || 0;
  }

  // Cambiar un alimento por otro
  replaceFood(category: string, currentFood: FoodItem, newFood: FoodItem): void {
    // Para carbohidratos, usar el valor original para evitar problemas con yogur bebible
    const portions = category === 'Carbohidratos' ? this.getOriginalTargetValue(category) : this.getTargetValue(category);
    this.mealPlan = this.foodCalculatorService.replaceFood(category, currentFood, newFood, portions);
    // Forzar actualizaci√≥n de la vista para reflejar cambios en objetivos
    this.mealPlan = { ...this.mealPlan };
  }


  // M√âTODOS DE AJUSTE DE PORCIONES
  adjustPortions(category: string, food: FoodItem, newPortions: number): void {
    this.mealPlan = this.foodCalculatorService.adjustPortions(category, food, newPortions);
  }

  // Obtener alternativas para un alimento
  getAlternatives(category: string, currentFood: FoodItem, mealType?: string): FoodItem[] {
    return this.foodCalculatorService.getAlternatives(category, currentFood, mealType).sort((a, b) => 
      a.alimento.localeCompare(b.alimento)
    );
  }

  incrementPortions(category: string, food: FoodItem): void {
    const currentItem = this.mealPlan[category]?.find(item => item.food.alimento === food.alimento);
    if (currentItem) {
      const totalUsed = this.getTotalPortionsUsed(category);
      const targetPortions = this.getTargetValue(category);
      // Solo permitir incrementar si no se excede el objetivo
      if (totalUsed < targetPortions) {
        this.adjustPortions(category, food, currentItem.portions + 1);
      }
    }
  }

  decrementPortions(category: string, food: FoodItem): void {
    const currentItem = this.mealPlan[category]?.find(item => item.food.alimento === food.alimento);
    if (currentItem && currentItem.portions > 0) {
      const newPortions = currentItem.portions - 1;
      if (newPortions === 0) {
        // Si llega a 0, remover el alimento
        this.removeFoodFromPlan(category, food);
      } else {
        this.adjustPortions(category, food, newPortions);
      }
    }
  }

  // Obtener total de porciones usadas en una categor√≠a
  getTotalPortionsUsed(category: string): number {
    if (!this.mealPlan[category]) return 0;
    return this.mealPlan[category].reduce((total, item) => total + item.portions, 0);
  }

  // Obtener porciones restantes disponibles
  getRemainingPortions(category: string): number {
    const target = this.getTargetValue(category);
    const used = this.getTotalPortionsUsed(category);
    return Math.max(0, target - used);
  }

  // Verificar si se pueden agregar m√°s porciones
  canAddMorePortions(category: string): boolean {
    return this.getRemainingPortions(category) > 0;
  }

  // Agregar un nuevo alimento al plan
  addFoodToPlan(category: string, food: FoodItem): void {
    this.mealPlan = this.foodCalculatorService.addFoodToPlan(category, food, 1);
  }

  // Remover un alimento del plan
  removeFoodFromPlan(category: string, food: FoodItem): void {
    this.mealPlan = this.foodCalculatorService.removeFoodFromPlan(category, food);
  }

  // Obtener alimentos disponibles para agregar (excluyendo los ya en el plan)
  getAvailableFoods(category: string): FoodItem[] {
    const currentFoods = this.mealPlan[category]?.map(item => item.food.alimento) || [];
    const allFoods = this.getFoodsByCategory(category);
    
    // Filtrar por tipo de comida
    const normalizedMealType = this.selectedMealType.toLowerCase();
    const filteredFoods = allFoods.filter(food => 
      food.tipo && food.tipo.includes(normalizedMealType)
    );
    
    // Excluir los alimentos ya en el plan y ordenar alfab√©ticamente
    return filteredFoods
      .filter(food => !currentFoods.includes(food.alimento))
      .sort((a, b) => a.alimento.localeCompare(b.alimento));
  }

  // Cambiar tipo de comida
  selectMealType(mealType: string): void {
    this.selectedMealType = mealType;
    this.isLoading = true;
    
    // Simular un peque√±o delay para mostrar el skeleton
    setTimeout(() => {
      this.generateMealPlanForMeal();
      this.isLoading = false;
    }, 500);
  }

  // Obtener objetivos de la comida seleccionada
  getMealObjectives(): { [category: string]: number } {
    const profileMealObjectives = this.profileConfigService.getMealObjectives(this.currentProfile);
    const mealObjectives = profileMealObjectives[this.selectedMealType];
    
    if (!mealObjectives) {
      return {};
    }

    // Mapear objetivos de la comida a categor√≠as del sistema
    let objectives = {
      'Proteina Semi-Magra': mealObjectives['prote√≠na SM'] || 0,
      'Proteina Magra': mealObjectives['prote√≠na M'] || 0,
      'Carbohidratos': mealObjectives['carbohidratos'] || 0,
      'L√°cteos': mealObjectives['leche/yogurt'] || 0,
      'Grasas': mealObjectives['grasas'] || 0,
      'Frutas': mealObjectives['fruta'] || 0,
      'Vegetales': mealObjectives['vegetales'] || 0
    };

    // Aplicar regla especial para yogur proteico bebible
    if (this.mealPlan && this.mealPlan['Proteina Magra']) {
      const hasYogurBebible = this.mealPlan['Proteina Magra'].some(
        item => item.food.alimento === 'Yogur proteico bebible' && item.portions > 0
      );
      
      if (hasYogurBebible) {
        // Reducir carbohidratos en 1 porci√≥n
        objectives['Carbohidratos'] = Math.max(0, objectives['Carbohidratos'] - 1);
      }
    }

    // Aplicar regla especial para yogur proteico sabores
    if (this.mealPlan && this.mealPlan['Proteina Magra']) {
      const hasYogurSabores = this.mealPlan['Proteina Magra'].some(
        item => item.food.alimento === 'Yogur proteico sabores' && item.portions > 0
      );
      
      if (hasYogurSabores) {
        // Reducir carbohidratos en 1 porci√≥n
        objectives['Carbohidratos'] = Math.max(0, objectives['Carbohidratos'] - 1);
      }
    }

    // Aplicar regla especial para helado proteico
    if (this.mealPlan && this.mealPlan['Proteina Magra']) {
      const hasHelado = this.mealPlan['Proteina Magra'].some(
        item => item.food.alimento === 'Helado proteico' && item.portions > 0
      );
      
      if (hasHelado) {
        // Reducir carbohidratos en 1 porci√≥n
        objectives['Carbohidratos'] = Math.max(0, objectives['Carbohidratos'] - 1);
      }
    }

    // Aplicar regla especial para salm√≥n
    if (this.mealPlan && this.mealPlan['Proteina Magra']) {
      const hasSalmon = this.mealPlan['Proteina Magra'].some(
        item => item.food.alimento === 'Salm√≥n' && item.portions > 0
      );
      
      if (hasSalmon) {
        // Eliminar grasas del plan
        objectives['Grasas'] = 0;
      }
      // Si no hay salm√≥n, mantener las grasas originales (no hacer nada)
    }

    return objectives;
  }

  // Generar plan de comidas para la comida seleccionada
  generateMealPlanForMeal(): void {
    const mealObjectives = this.getMealObjectives();
    this.foodCalculatorService.setDailyTarget(mealObjectives as any);
    this.foodCalculatorService.setCurrentMealType(this.selectedMealType);
    this.generateMealPlan();
  }

  // Obtener categor√≠as que tienen objetivos > 0 para la comida seleccionada
  getActiveCategories(): any[] {
    const mealObjectives = this.getMealObjectives();
    return this.macroCategories.filter(category => {
      const objectiveValue = mealObjectives[category.key];
      return objectiveValue && objectiveValue > 0;
    });
  }

  // Generar ID √∫nico para cada item
  getItemId(category: string, food: FoodItem): string {
    return `${category}-${food.alimento}`;
  }

  // Toggle entre peso original y cocinado
  toggleCookedWeight(category: string, food: FoodItem): void {
    const itemId = this.getItemId(category, food);
    if (this.cookedItems.has(itemId)) {
      this.cookedItems.delete(itemId);
    } else {
      this.cookedItems.add(itemId);
    }
  }

  // Verificar si un item est√° en modo cocinado
  isCookedMode(category: string, food: FoodItem): boolean {
    const itemId = this.getItemId(category, food);
    return this.cookedItems.has(itemId);
  }

  // Obtener el peso a mostrar (original o cocinado)
  getDisplayWeight(category: string, food: FoodItem, totalAmount: string): string {
    // Solo aplicar l√≥gica de cocinado a alimentos medidos en gramos de categor√≠as espec√≠ficas
    // Excluir helado proteico que no se cocina
    if (this.isCookedMode(category, food) && 
        this.shouldShowCookedWeight(totalAmount) && 
        this.shouldCategoryShowCookedWeight(category) &&
        food.alimento !== 'Helado proteico') {
      return this.getCookedWeight(totalAmount);
    }
    return totalAmount;
  }

  // Verificar si el alimento debe mostrar peso cocinado (solo gramos y tazas de ciertas categor√≠as)
  shouldShowCookedWeight(totalAmount: string): boolean {
    return (totalAmount.includes('g') || totalAmount.includes('taza')) && 
           !totalAmount.includes('unidad') && 
           !totalAmount.includes('lata') &&
           !totalAmount.includes('helado'); // Excluir helado proteico
  }

  // Verificar si la categor√≠a permite peso cocinado
  shouldCategoryShowCookedWeight(category: string): boolean {
    const categoriesWithCookedWeight = ['Carbohidratos', 'Proteina Magra', 'Proteina Semi-Magra', 'L√°cteos', 'Vegetales'];
    return categoriesWithCookedWeight.includes(category);
  }

  // Calcular peso cocinado (restando 20% para gramos, 50% para tazas)
  getCookedWeight(totalAmount: string): string {
    // Extraer el n√∫mero del totalAmount
    const match = totalAmount.match(/(\d+)/);
    if (match) {
      const rawWeight = parseInt(match[1]);
      
      // L√≥gica espec√≠fica para vegetales (tazas): 1/2 taza cocinado = 1 taza crudo
      if (totalAmount.includes('taza')) {
        const cookedWeight = rawWeight * 0.5; // 50% para vegetales
        
        // Manejar fracciones para tazas
        if (cookedWeight === 0.5) {
          return '1/2 taza cocinado';
        } else if (cookedWeight === 1.5) {
          return '1 1/2 tazas cocinado';
        } else if (cookedWeight === 2.5) {
          return '2 1/2 tazas cocinado';
        } else {
          const roundedWeight = Math.round(cookedWeight);
          return `${roundedWeight} taza${roundedWeight > 1 ? 's' : ''} cocinado`;
        }
      } else {
        // L√≥gica para otros alimentos (gramos): restar 20%
        const cookedWeight = Math.round(rawWeight * 0.8);
        
        // Mantener la unidad original
        if (totalAmount.includes('g')) {
          return `${cookedWeight}g cocinado`;
        } else if (totalAmount.includes('unidad')) {
          return `${cookedWeight} unidades cocinadas`;
        } else {
          return `${cookedWeight} cocinado`;
        }
      }
    }
    return totalAmount;
  }

  // Cerrar todos los dropdowns
  closeDropdowns(): void {
    this.showAlternatives = null;
    this.showAddFood = null;
  }

  // Obtener el icono del alimento actual en la categor√≠a
  getCategoryIcon(categoryKey: string): string {
    const categoryItems = this.mealPlan[categoryKey];
    if (categoryItems && categoryItems.length > 0) {
      const currentFood = categoryItems[0].food.alimento;
      return this.getFoodIcon(currentFood);
    }
    // Fallback al icono de categor√≠a si no hay alimentos
    const category = this.macroCategories.find(cat => cat.key === categoryKey);
    return category ? category.icon : 'üçΩÔ∏è';
  }

  // Mapear alimentos a iconos
  getFoodIcon(foodName: string): string {
    const foodIcons: { [key: string]: string } = {
      // Carbohidratos
      'Arroz': 'üçö',
      'Pasta': 'üçù',
      'Quinoa': 'üåæ',
      'Avena/harina de avena': 'ü•£',
      'Pan de molde': 'üçû',
      'Pan tostado': 'üçû',
      'Pan thins': 'üçû',
      'Tortitas de arroz/ma√≠z': 'üçò',
      'Tortilla para fajitas': 'üåÆ',
      'Miel': 'üçØ',
      'Ma√≠z dulce': 'üåΩ',
      'Cous-cous': 'üåæ',
      'Palomitas de ma√≠z': 'üçø',
      'Granola baja en grasa': 'ü•£',
      'Casabe': 'üçû',
      'Pan √Årabe': 'ü•ñ',
      'Pan Wasa': 'üçû',
      'Galleta Mar√≠a': 'üç™',
      'Cornflakes': 'ü•£',
      'Pan blanco o integral de barra': 'üçû',
      'Az√∫car blanco/moreno': 'üçØ',
      'Crema de arroz': 'ü•£',
      'Patata': 'ü•î',
      'Boniato': 'ü•î',
      'Yuca (cocido)': 'ü•î',
      'Fajitas medianas': 'üåÆ',
      'Harina de ma√≠z': 'üåæ',
      
      // Prote√≠nas
      'Pechuga de pollo/pavo': 'üçó',
      'Pescado blanco': 'üêü',
      'Camarones/gambas': 'ü¶ê',
      'At√∫n al natural en lata': 'üêü',
      'Clara de huevo': 'ü•ö',
      'Jam√≥n de pollo/pavo': 'üçñ',
      'Lomo embuchado': 'üçñ',
      'Prote√≠na en polvo (whey y vegana)': 'ü•§',
      'Lomo de cerdo': 'üçñ',
      'Soja': 'ü´ò',
      'Seit√°n': 'ü•©',
      'Queso burgos light/desnatado': 'üßÄ',
      'Yogur proteico': 'ü•õ',
      'Yogur proteico bebible': 'ü•õ',
      'Yogur proteico sabores': 'ü•õ',
      'Gelatina proteica': 'üçÆ',
      'Yogur straciatella': 'ü•õ',
      'Yogur proteico natrual': 'ü•õ',
      'Queso fresco batido 0%': 'üßÄ',
      'Queso havarti light': 'üßÄ',
      'Queso mozzarella light': 'üßÄ',
      'Queso cottage': 'üßÄ',
      'Queso fresco light': 'üßÄ',
      'Salm√≥n': 'üêü',
      'Helado proteico': 'üç¶',
      
      // Prote√≠na Semi-Magra
      'Huevo': 'ü•ö',
      'Salm√≥n, caballa': 'üêü',
      'Carne de cerdo (graso)': 'ü•©',
      'Carne roja grasa': 'ü•©',
      'Jam√≥n serrano/ib√©rico': 'üçñ',
      'At√∫n en aceite': 'üêü',
      'Tofu': 'üßÄ',
      'Queso burgos natural': 'üßÄ',
      'Queso mozzarella normal': 'üßÄ',
      'Queso parmesano': 'üßÄ',
      
      // L√°cteos
      'Leche desnatada': 'ü•õ',
      'Yogur natural desnatado': 'ü•õ',
      'Yogur griego desnatado': 'ü•õ',
      'Queso fresco desnatado': 'üßÄ',
      
      // Grasas
      'Aguacate': 'ü•ë',
      'Almendras': 'ü•ú',
      'Nueces': 'ü•ú',
      'Aceitunas': 'ü´í',
      'Mantequilla': 'üßà',
      'Mantequilla de man√≠': 'ü•ú',
      'Crema de frutos secos': 'ü•ú',
      'Coco rallado': 'ü••',
      'Aceituna verde (deshuesadas)': 'ü´í',
      'Aceitunas negras': 'ü´í',
      'Cacahuetes/man√≠': 'ü•ú',
      'Chocolate negro (70-75%)': 'üç´',
      'Nata para cocinar 15%': 'ü•õ',
      'Leche de coco': 'ü•õ',
      'Semillas de girasol, ajonjol√≠, ch√≠a': 'ü•ú',
      'Queso Crema normal': 'üßÄ',
      'Queso feta': 'üßÄ',
      'Avellanas': 'ü•ú',
      'Cashews/anacardos': 'ü•ú',
      'Pistachos': 'ü•ú',
      'Aceite de oliva': 'ü´í',
      'Mayonesa': '',
      
      
      // Frutas
      'Banana': 'üçå',
      'Manzana': 'üçé',
      'Pera': 'üçê',
      'Kiwi': 'ü•ù',
      'Durazno/melocot√≥n': 'üçë',
      'Ciruela': 'üü£',
      'Uvas': 'üçá',
      'Naranja': 'üçä',
      'Mandarina': 'üçä',
      'Cerezas': 'üçí',
      'Granada': 'üçé',
      'Uvas pasas': 'üçá',
      'D√°tiles': 'üü§',
      'Fresas': 'üçì',
      
      // Vegetales
      'Acelgas': 'ü•¨',
      'Hinojo': 'ü•¨',
      'Aj√≠ dulce': 'üå∂Ô∏è',
      'Hongos': 'üçÑ',
      'Ajo': 'üßÑ',
      'Jugo de tomate': 'üçÖ',
      'Ajo porro': 'üßÑ',
      'Lechuga': 'ü•¨',
      'Alcachofa': 'ü•¨',
      'Nabo': 'ü•¨',
      'Pimiento': 'ü´ë',
      'Calabac√≠n': 'ü•í',
      'Quimbomb√≥': 'ü•¨',
      'Cebolla': 'üßÖ',
      'R√°banos': 'ü•¨',
      'Ceboll√≠n': 'üßÑ',
      'Remolacha': 'ü•¨',
      'Apio': 'ü•¨',
      'Alfalfa': 'üå±',
      'Palmito': 'ü•¨',
      'Calabaza': 'üéÉ',
      'Pepino': 'ü•í',
      'Berenjena': 'üçÜ',
      'Perejil': 'üåø',
      'Berros': 'ü•¨',
      'Br√≥coli': 'ü•¶',
      'Chayota': 'ü•¨',
      'Repollo': 'ü•¨',
      'Coliflor': 'ü•¨',
      'Tomate': 'üçÖ',
      'Coraz√≥n de alcachofa': 'ü•¨',
      'Tomate en lata': 'üçÖ',
      'Repollitos de Bruselas': 'ü•¨',
      'Escarola': 'ü•¨',
      'Vainitas': 'ü´õ',
      'Esp√°rragos': 'ü•¨',
      'Vegetales chinos': 'ü•¨',
      'Espinaca': 'ü•¨',
      'Zanahoria': 'ü•ï',
      'Edamames': 'ü´ò'
    };
    
    return foodIcons[foodName] || 'üçΩÔ∏è';
  }

  // Obtener la etiqueta del tipo de comida seleccionado
  getMealTypeLabel(): string {
    const mealType = this.mealTypes.find(type => type.key === this.selectedMealType);
    return mealType ? mealType.label : 'comida';
  }

  // Obtener el texto de porciones con pluralizaci√≥n correcta
  getPortionsText(category: string): string {
    const value = this.getTargetValue(category);
    return value === 1 ? '1 porci√≥n' : `${value} porciones`;
  }

  // Obtener el total de porciones usadas en todas las categor√≠as
  getTotalPortionsUsedGlobal(): number {
    const activeCategories = this.getActiveCategories();
    return activeCategories.reduce((total, category) => {
      return total + this.getTotalPortionsUsed(category.key);
    }, 0);
  }

  // Obtener el total de porciones objetivo en todas las categor√≠as
  getTotalPortionsTargetGlobal(): number {
    const activeCategories = this.getActiveCategories();
    return activeCategories.reduce((total, category) => {
      return total + this.getTargetValue(category.key);
    }, 0);
  }
}
